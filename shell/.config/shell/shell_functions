#!/bin/sh
ps1_venv() {
    # Strip out the path and just leave the env name.
    [ -n "$VIRTUAL_ENV" ] && echo " (${VIRTUAL_ENV##*/})"
}

ps1_vim() {
    [ -n "$VIMRUNTIME" ] && echo ' (in vim)'
}

ps1_ranger() {
    [ -n "$RANGER_LEVEL" ] && echo ' (in ranger)'
}

ps1_git() {
    # Redirect stderr for cases when __git_ps1 wasn't sourced.
    __git_ps1 2>/dev/null
}

ps1_status() {
    last_status="$?"
    [ "$last_status" = '0' ] && echo '+' || echo '-'
}

vm () {
    # A wrapper around vman.
    # Order of precedence:
    # 1. If a program is found by $1, run vman for it.
    # 2. If an alias is found by $1, run vman for it's value.
    # 3. Run vman for $1.
    #   
    # Such an order is needed to get a smarter alias expansion than
    # could be done with `alias vm='vman '`, since the actual programs
    # should get precedence over aliases, not otherwise. 
    # E.g. if you have `alias ls='ls -p'`, then `vm ls` should get you
    # `vman ls`, not `vman 'ls -p'`, and if you have `alias p='pacman'`,
    # you'd get `vman pacman` by running `vm p`, if there's no program
    # by name `p`.
    if which "$1" >/dev/null 2>&1; then
        vman "$(which "$1")"
    elif command -v "$1" | grep '^alias' > /dev/null; then
        alias_val="$(command -v "$1" | grep -Po "(?<==').*(?=')")"
        vman "$alias_val"
    else
        vman "$1"
    fi
}

u() {
    # Go up $1 directories.
    # If $1 is omitted or is not an integer, go up 1 directory.
    dir=''
    if echo "$1" | grep -Eq '^[0-9]+$'; then
        for _ in $(seq "$1")
        do
            dir="$dir../"
        done
    else
        dir='..'
    fi
    cd "$dir"
}

ww() {
    # Open index file of the $1 wiki (the first one if $1 is omitted).
    vim -c "execute \"normal $1\<Plug>VimwikiIndex\""
}

fzg() {
    # Open a directory from special files containing a list of shortcuts.
    cd "$(fzf-shortcuts ~/.config/shortcuts ~/.config/shortcuts.local)" ||
        return 1
}

vim_session_venv() {
    # Get a directory to venv mapping from a file, activate venv
    # before launching vim with the session of the directory.
    # Do not change venv if already in a venv.
    #
    # File example:
    # /home/user/directory1 venv1
    # /home/user/directory2 venv2
    #
    # Usage example:
    # vim_session_venv ~/.config/venv_mapping
    if [ -z "$VIRTUAL_ENV" ]; then
        venv_mapping_file="$1"
        if [ -n "$venv_mapping_file" ] && [ -f "$venv_mapping_file" ]; then
            venv_name="$(grep "$(pwd)" "$venv_mapping_file" | awk '{ print $2 }')"
            [ -n "$venv_name" ] && workon "$venv_name"
        fi
    fi

    vim -c 'WrappedObsession'
}

ranger_cd() {
    # Automatically change the directory in bash after closing ranger.
    # Source:
    # https://github.com/ranger/ranger/blob/master/examples/bash_automatic_cd.sh
    # The same script can be found locally:
    # /usr/share/doc/ranger/examples/bash_automatic_cd.sh
    #
    # This is a function for automatically changing the directory to
    # the last visited one after ranger quits.
    # To undo the effect of this function, you can type "cd -" to return to the
    # original directory.
    temp_file="$(mktemp -t "ranger_cd.XXXXXXXXXX")"
    ranger --choosedir="$temp_file" -- "${@:-$PWD}"
    chosen_dir="$(cat -- "$temp_file")"
    if [ -f "$temp_file" ] && [ "$chosen_dir" != "$PWD" ]; then
        cd -- "$chosen_dir"
    fi
    rm -f -- "$temp_file"
}

wrap_ranger() {
    # Temporary workaround for tmux renaming problem.
    [ -z "$TMUX" ] || current_window_name="$(tmux display-message -p '#W')"
    # The ranger_cd version switches the directory in bash on exit,
    # ranger-shell.sh allows to expand shell aliases inside the :shell
    # command.
    SHELL=~/.local/bin/ranger-shell.sh ranger_cd
    [ -z "$current_window_name" ] || tmux rename-window "$current_window_name"
}

fm() {
    # Go to a mounted partition's directory.
    choice="$(fzf-mounted)"
    [ -n "$choice" ] && ranger_cd "$choice"
}

gfm() {
    choice="$(fzf-mounted)"
    [ -n "$choice" ] && cd "$choice"
}

copyline() {
    # Copy current command.
    # From https://stackoverflow.com/a/23710535.
    # Should be bound to a shortcut in bash, depends on `copy`
    # wrapper script.
    printf %s "$READLINE_LINE" | copy
}

clc() {
    # Copy last command.
    history -p '!!' | sed 1q | copy
}

rpc() {
    rpw "$1" | copy
    yank
    echo
}
