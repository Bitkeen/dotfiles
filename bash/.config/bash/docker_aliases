#!/bin/sh
docker_alias() {
    key="$1"
    case "$key" in
        bd)
            cmd='build';;
        ex)
            [ "$#" -lt 2 ] && echo 'Specify container name.' && return 1
            'docker' exec -i -t "$2" sh -c \
                'if [ -f /bin/bash ]; then bash -l; else sh -l; fi'
            return;;
        im)
            cmd='images';;
        killall)
            cmd="kill $('docker' ps -q)";;
        krm)
            'docker' ps -q | xargs docker kill
            'docker' ps -aq | xargs docker rm
            return;;
        lg)
            cmd="logs";;
        lgf)
            cmd='logs -f';;
        lgft)
            # --tail="all" is default
            cmd='logs -f --tail=0';;
        pl)
            cmd='pull';;
        ps)
            cmd='ps --format table{{.ID}}\t{{.Image}}\t{{.Names}}\t{{.Status}}';;
        psa)
            cmd='ps -a --format table{{.ID}}\t{{.Image}}\t{{.Names}}\t{{.Status}}';;
        psf)
            cmd='ps';;
        psfa)
            cmd='ps -a';;
        rs)
            cmd="restart";;
        rsl)
            [ "$#" -lt 2 ] && echo 'Specify container name.' && return 1
            'docker' restart "$2" && 'docker' logs -f "$2"
            return;;
        sys)
            cmd="system";;
        rmall)
            cmd="rm $('docker' ps -aq)";;
        *)
            cmd=$1;;
    esac
    shift
    docker $cmd "$@"
}


docker_compose_alias() {
    key="$1"
    case "$key" in
        d)
            cmd='down';;
        du)
            shift
            'docker-compose' down
            'docker-compose' up --detach "$@" && 'docker-compose' logs -f
            return;;
        k)
            cmd='kill';;
        lgf)
            cmd='logs -f';;
        lgft)
            # --tail="all" is default
            cmd='logs -f --tail=0';;
        pl)
            cmd='pull';;
        r)
            cmd="run";;
        rnd)
            cmd="run --no-deps --name $2";;
        rs)
            cmd="restart";;
        rsl)
            [ "$#" -lt 2 ] && echo 'Specify container name.' && return 1
            'docker-compose' restart "$2" &&
                'docker-compose' logs -f "$2"
            return;;
        u)
            shift && 'docker-compose' up --detach "$@" && 'docker-compose' logs -f
            return;;
        ur)
            # Restart a single service. Different from restart in the
            # way that if a service in the docker-compose file has been
            # changed, it will be restarted with the new changes.
            cmd='up -d --no-deps --force-recreate';;
        url)
            [ "$#" -lt 2 ] && echo 'Specify container name.' && return 1
            'docker-compose' up -d --no-deps --force-recreate "$2" &&
                'docker-compose' logs -f "$2"
            return;;
        *)
            cmd=$1;;
    esac
    shift
    docker-compose $cmd "$@"
}


alias docker='docker_alias'
alias docker-compose='docker_compose_alias'
